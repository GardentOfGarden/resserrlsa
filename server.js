const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'eclipse_secret_2024';

app.use(cors());
app.use(express.json());
app.use(express.static('.'));

const db = new sqlite3.Database(':memory:');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
    db.run(`CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        email TEXT UNIQUE,
        password TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    db.run(`CREATE TABLE applications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        version TEXT DEFAULT '1.0',
        secret TEXT,
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    db.run(`CREATE TABLE licenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        app_id INTEGER,
        license_key TEXT UNIQUE,
        hwid TEXT,
        hwid_locked BOOLEAN DEFAULT 0,
        expires_at DATETIME,
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(app_id) REFERENCES applications(id)
    )`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const defaultPassword = bcrypt.hashSync('admin123', 10);
    db.run(`INSERT INTO users (username, email, password) VALUES (?, ?, ?)`, 
        ['admin', 'admin@eclipse.com', defaultPassword]);
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ success: false, message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', (req, res) => {
    const { username, email, password } = req.body;
    
    if (!username || !email || !password) {
        return res.json({ success: false, message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    const hashedPassword = bcrypt.hashSync(password, 10);
    
    db.run(`INSERT INTO users (username, email, password) VALUES (?, ?, ?)`, 
        [username, email, hashedPassword], 
        function(err) {
            if (err) {
                return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }
            res.json({ success: true, message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' });
        });
});

// –í—Ö–æ–¥
app.post('/api/login', (req, res) => {
    const { username, password } = req.body;
    
    if (!username || !password) {
        return res.json({ success: false, message: '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å' });
    }

    db.get(`SELECT * FROM users WHERE username = ? OR email = ?`, [username, username], (err, user) => {
        if (err || !user) {
            return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        if (!bcrypt.compareSync(password, user.password)) {
            return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const token = jwt.sign({ 
            id: user.id, 
            username: user.username 
        }, JWT_SECRET, { expiresIn: '24h' });
        
        res.json({
            success: true,
            token: token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email
            }
        });
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/apps', authenticateToken, (req, res) => {
    db.all(`
        SELECT a.*, 
               (SELECT COUNT(*) FROM licenses WHERE app_id = a.id) as keys_count
        FROM applications a 
        WHERE user_id = ?
    `, [req.user.id], (err, apps) => {
        if (err) {
            return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' });
        }
        res.json({ success: true, data: apps || [] });
    });
});

// –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.post('/api/apps', authenticateToken, (req, res) => {
    const { name, version } = req.body;
    
    if (!name) {
        return res.json({ success: false, message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    const secret = require('crypto').randomBytes(32).toString('hex');
    
    db.run(`INSERT INTO applications (user_id, name, version, secret) VALUES (?, ?, ?, ?)`, 
        [req.user.id, name, version || '1.0', secret], 
        function(err) {
            if (err) {
                return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' });
            }
            res.json({ success: true, message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
        });
});

// –°–æ–∑–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á
app.post('/api/keys', authenticateToken, (req, res) => {
    const { app_id } = req.body;
    
    if (!app_id) {
        return res.json({ success: false, message: 'ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    const key = require('crypto').randomBytes(16).toString('hex').toUpperCase();
    
    db.run(`INSERT INTO licenses (app_id, license_key) VALUES (?, ?)`, 
        [app_id, key], 
        function(err) {
            if (err) {
                return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞' });
            }
            res.json({ success: true, key: key });
        });
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª—é—á–∞
app.post('/api/verify', (req, res) => {
    const { app_name, owner_id, license_key, hwid } = req.body;
    
    if (!app_name || !owner_id || !license_key || !hwid) {
        return res.json({ success: false, message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    db.get(`
        SELECT l.*, a.name as app_name, a.user_id as owner_id 
        FROM licenses l 
        JOIN applications a ON l.app_id = a.id 
        WHERE a.name = ? AND a.user_id = ? AND l.license_key = ?
    `, [app_name, owner_id, license_key], (err, license) => {
        if (err || !license) {
            return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á' });
        }

        if (license.status !== 'active') {
            return res.json({ success: false, message: '–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞' });
        }

        if (license.expires_at && new Date(license.expires_at) < new Date()) {
            return res.json({ success: false, message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç–µ–∫' });
        }

        if (license.hwid_locked && license.hwid && license.hwid !== hwid) {
            return res.json({ success: false, message: 'HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç' });
        }

        // –ï—Å–ª–∏ HWID –ø—Ä–∏–≤—è–∑–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞, –Ω–æ HWID –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (license.hwid_locked && !license.hwid) {
            db.run(`UPDATE licenses SET hwid = ? WHERE id = ?`, [hwid, license.id]);
        }

        res.json({
            success: true, 
            message: '–õ–∏—Ü–µ–Ω–∑–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        });
    });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'login.html'));
});

app.get('/dashboard.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'dashboard.html'));
});

app.get('/apps.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'apps.html'));
});

app.listen(PORT, () => {
    console.log(`üöÄ Eclipse Auth Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç –õ–æ–≥–∏–Ω: admin`);
    console.log(`üìç –ü–∞—Ä–æ–ª—å: admin123`);
});
